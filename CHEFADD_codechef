#include<bits/stdc++.h>
#define int long long
using namespace std;
const int maxn=32;
int dp[maxn][maxn][maxn][2];
void solve(){
    int a,b,c;
    cin>>a>>b>>c;
    string s="";
    while(c){
        if(c&1){
            s.push_back('1');
        } else {
            s.push_back('0');
        }
        c>>=1;
    }
    a=__builtin_popcount(a);
    b=__builtin_popcount(b);
    memset(dp,0,sizeof(dp));
    if(s[0]=='1'){
        dp[0][1][0][0]=1;
        dp[0][0][1][0]=1;
    } else {
        dp[0][0][0][0]=1;
        dp[0][1][1][1]=1;
    }
    for(int i=1;i<s.length();i++){
        for(int A=0;A<=a;A++){
            for(int B=0;B<=b;B++){
                if(s[i]=='1'){
                    if(A>=1){
                        dp[i][A][B][0]+=dp[i-1][A-1][B][0];
                    }
                    if(B>=1){
                        dp[i][A][B][0]+=dp[i-1][A][B-1][0];
                    }
                    dp[i][A][B][0]+=dp[i-1][A][B][1];
                    if(A>=1&&B>=1)
                    dp[i][A][B][1]+=dp[i-1][A-1][B-1][1];
                } else {
                    if(A>=1){
                        dp[i][A][B][1]+=dp[i-1][A-1][B][1];
                    }
                    if(B>=1){
                        dp[i][A][B][1]+=dp[i-1][A][B-1][1];
                    }
                    dp[i][A][B][0]+=dp[i-1][A][B][0];
                    if(A>=1&&B>=1)
                    dp[i][A][B][1]+=dp[i-1][A-1][B-1][0];
                }
            }
        }
    }
    cout<<dp[s.length()-1][a][b][0]<<"\n";
}
int32_t main(){
    int t;
    cin>>t;
    while(t--){
        solve();
    }
    return 0;
}

